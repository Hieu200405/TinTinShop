import { COLORS } from "@/util/constant";
import { Ionicons } from "@expo/vector-icons";
import { View, Text, TouchableOpacity, StyleSheet, ScrollView, KeyboardAvoidingView, Platform } from "react-native"
import { router } from "expo-router";
import { useState } from "react";
import ShareTextInput from "@/components/ShareTextInput";
import { Formik } from "formik";
import { useActionSheet } from "@expo/react-native-action-sheet";
import ShareButton from "@/components/ShareButton";
import ProfileInput from "@/components/ProfileInput";
import Toast from "react-native-toast-message";
import { callCreateCategory } from "@/config/api";
import { ICategory } from "@/types/backend";
import * as Yup from 'yup';

// Validation schema for category
const categorySchema = Yup.object().shape({
    name: Yup.string()
        .required('Category name is required')
        .min(2, 'Name must be at least 2 characters')
        .max(50, 'Name must not exceed 50 characters')
        .trim(),
    description: Yup.string()
        .required('Description is required')
        .min(10, 'Description must be at least 10 characters')
        .max(200, 'Description must not exceed 200 characters')
        .trim(),
});

const CreateCategory = () => {
    const { showActionSheetWithOptions } = useActionSheet();
    const [isActive, setIsActive] = useState<boolean>(true);

    const openStatusPicker = () => {
        const options = ["Active", "Inactive", "Cancel"];
        const cancelButtonIndex = 2;

        showActionSheetWithOptions(
            {
                options,
                cancelButtonIndex,
            },
            (buttonIndex) => {
                if (buttonIndex === 0) setIsActive(true);
                else if (buttonIndex === 1) setIsActive(false);
            }
        );
    };

    const handleCreateCategory = async (values: any) => {
        console.log(values);
        
        const newCategory: ICategory = {
            id: '', // Will be generated by backend
            name: values.name.trim(),
            description: values.description.trim(),
            active: isActive,
        }

        try {
            const resCategory = await callCreateCategory(newCategory);
            if (resCategory.data) {
                Toast.show({
                    text1: "Tạo danh mục thành công",
                    type: "success",
                });
                router.back();
            } else {
                Toast.show({
                    text1: "Tạo danh mục thất bại",
                    type: "error",
                });
            }
        } catch (error) {
            Toast.show({
                text1: "Có lỗi xảy ra khi tạo danh mục",
                type: "error",
            });
        }
    }

    return (
        <View style={[styles.container, { paddingBottom: 100 }]}>
            <View style={styles.header}>
                <TouchableOpacity
                    onPress={() => router.back()}
                    style={styles.backButton}
                    activeOpacity={0.7}
                >
                    <Ionicons name="arrow-back" size={24} color={COLORS.ITEM_TEXT} />
                </TouchableOpacity>

                <Text style={styles.headerText}>Thêm mới danh mục</Text>
            </View>
            
            <KeyboardAvoidingView behavior={Platform.OS === "ios" ? "padding" : "height"}>
                <ScrollView>
                    <Formik 
                        initialValues={{
                            name: "",
                            description: "",
                        }}
                        validationSchema={categorySchema}
                        onSubmit={(values) => {
                            handleCreateCategory(values);
                        }}
                    >
                        {({ handleChange, handleBlur, handleSubmit, values, errors }) => (
                            <View>
                                <ShareTextInput
                                    title="Tên danh mục"
                                    value={values.name}
                                    onChangeText={handleChange("name")}
                                    onBlur={handleBlur("name")}
                                    textStyle={styles.inputText}
                                    inputStyle={styles.input}
                                    error={errors.name}
                                    placeholder="Nhập tên danh mục"
                                />
                                
                                <ShareTextInput
                                    title="Mô tả"
                                    value={values.description}
                                    onChangeText={handleChange("description")}
                                    onBlur={handleBlur("description")}
                                    textStyle={styles.inputText}
                                    inputStyle={[styles.input, styles.textArea]}
                                    error={errors.description}
                                    placeholder="Nhập mô tả danh mục"
                                    multiline={true}
                                    numberOfLines={4}
                                />

                                <View>
                                    <Text style={styles.labelText}>Trạng thái</Text>
                                    <ProfileInput
                                        value={isActive ? "Hoạt động" : "Không hoạt động"}
                                        onPress={openStatusPicker}
                                        iconName="checkmark-circle"
                                    />
                                </View>

                                <ShareButton
                                    title="Tạo Danh Mục"
                                    onPress={handleSubmit}
                                    btnStyle={styles.button}
                                    textStyle={styles.buttonText}
                                    logo={<Ionicons name="folder-outline" size={24} color="white" />}
                                />
                            </View>
                        )}
                    </Formik>
                </ScrollView>
            </KeyboardAvoidingView>
        </View>
    )
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: COLORS.BACKGROUND,
        paddingHorizontal: 20,
        paddingTop: 20,
    },
    header: {
        flexDirection: "row",
        alignItems: "center",
        position: "relative",
        marginVertical: 30,
    },
    backButton: {
        padding: 6,
        zIndex: 10,
    },
    headerText: {
        position: "absolute",
        left: 0,
        right: 0,
        textAlign: "center",
        fontSize: 18,
        fontWeight: "bold",
        color: COLORS.ITEM_TEXT,
    },
    input: {
        borderWidth: 1,
        borderColor: COLORS.ITEM_BORDER,
        borderRadius: 8,
        paddingVertical: 12,
        paddingHorizontal: 15,
        backgroundColor: COLORS.ITEM_BACKGROUND,
        color: COLORS.ITEM_TEXT,
    },
    textArea: {
        height: 100,
        textAlignVertical: 'top',
    },
    inputText: {
        color: COLORS.ITEM_TEXT,
    },
    labelText: {
        color: COLORS.ITEM_TEXT,
        fontSize: 16,
        fontWeight: "bold",
        marginBottom: 5,
    },
    button: {
        backgroundColor: COLORS.SUCCESS,
        opacity: 0.8,
        paddingVertical: 14,
        borderRadius: 8,
        alignItems: "center",
        marginVertical: 30,
        flexDirection: 'row',
        justifyContent: 'center',
        gap: 10,
    },
    buttonText: {
        color: "#ffffff",
        fontWeight: "bold",
        fontSize: 16,
    },
});

export default CreateCategory;